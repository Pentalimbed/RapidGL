in vec2 texcoord;
in vec3 world_pos;
in vec3 normal;

out vec4 frag_color;

uniform sampler2D texture_diffuse1; /* "background"  */
uniform sampler2D texture_diffuse2; /* r - texture   */
uniform sampler2D texture_diffuse3; /* g - texture   */
uniform sampler2D texture_diffuse4; /* b - texture   */
uniform sampler2D texture_diffuse5; /* blend map     */
uniform sampler2D texture_diffuse6; /* hill sides    */
uniform sampler2D texture_diffuse7; /* slope texture */

uniform float texcoord_tiling_factor;
uniform float grass_slope_threshold;
uniform float slope_rock_threshold;

uniform vec3 cam_pos;

uniform float specular_intensity;
uniform float specular_power;

uniform float gamma;

struct BaseLight
{
    vec3 color;
    float intensity;
};

struct DirectionalLight
{
    BaseLight base;
    vec3 direction;
};

struct Attenuation
{
    float constant;
    float linear;
    float quadratic;
};

struct PointLight
{
    BaseLight base;
    Attenuation atten;
    vec3 position;
    float range;
};

struct SpotLight
{
    PointLight point;
    vec3 direction;
    float cutoff;
};

vec4 blendedTerrainColor(vec3 normal)
{
    vec4 blend_map_color      = texture(texture_diffuse5, texcoord);
    float back_texture_amount = 1.0 - (blend_map_color.r + blend_map_color.g + blend_map_color.b);
    vec2 tiled_texcoord       = texcoord * texcoord_tiling_factor;
    
    vec4 bg_color    = vec4(0.0);
    vec4 grass_color = texture(texture_diffuse1, tiled_texcoord);
    vec4 rock_color  = texture(texture_diffuse6, tiled_texcoord);
    vec4 slope_color = texture(texture_diffuse7, tiled_texcoord);

    float slope = 1.0 - normal.y;

    if(slope < grass_slope_threshold)
    {
        float blend_amount = slope / grass_slope_threshold;
        bg_color = mix(grass_color, slope_color, blend_amount);
    }

    if(slope >= grass_slope_threshold && slope < slope_rock_threshold)
    {
        float blend_amount = (slope - grass_slope_threshold) * (1.0 / (slope_rock_threshold - grass_slope_threshold));
        bg_color = mix(slope_color, rock_color, blend_amount);
    }

    if(slope >= slope_rock_threshold)
    {
        bg_color = rock_color;
    }

    vec4 background_texture_color = bg_color * back_texture_amount;
    vec4 r_texture_color          = texture(texture_diffuse2, tiled_texcoord) * blend_map_color.r;
    vec4 g_texture_color          = texture(texture_diffuse3, tiled_texcoord) * blend_map_color.g;
    vec4 b_texture_color          = texture(texture_diffuse4, tiled_texcoord) * blend_map_color.b;

    return background_texture_color + r_texture_color + g_texture_color + b_texture_color;
}

vec4 blinnPhong(BaseLight base, vec3 direction, vec3 normal, vec3 world_pos)
{
    float diffuse = max(dot(normal, -direction), 0.0f);

    vec3 dir_to_eye  = normalize(cam_pos - world_pos);
    vec3 half_vector = normalize(dir_to_eye - direction);
    float specular   = pow(max(dot(half_vector, normal), 0.0f), specular_power);

    vec4 diffuse_color  = vec4(base.color, 1.0f) * base.intensity * diffuse * blendedTerrainColor(normal);
    vec4 specular_color = vec4(1.0) * specular * specular_intensity;

    return diffuse_color + specular_color;
}

vec4 calcDirectionalLight(DirectionalLight light, vec3 normal, vec3 world_pos)
{
    return blinnPhong(light.base, light.direction, normal, world_pos);
}

vec4 calcPointLight(PointLight light, vec3 normal, vec3 world_pos)
{
    vec3 light_direction    = world_pos - light.position;
    float distance_to_point = length(light_direction);

    if(distance_to_point > light.range)
    {
        return vec4(0.0f);
    }

    float attenuation = light.atten.constant                                          + 
                        light.atten.linear    * distance_to_point                     +
                        light.atten.quadratic * distance_to_point * distance_to_point +
                        0.00001f; //to prevent division by zero
    
    vec4 color = blinnPhong(light.base, normalize(light_direction), normal, world_pos);

    return color / attenuation;
}

vec4 calcSpotLight(SpotLight light, vec3 normal, vec3 world_pos)
{
    vec3 light_direction = normalize(world_pos - light.point.position);
    float theta = dot(light_direction, light.direction);
    
    vec4 color = vec4(0.0f);
    
    if(theta > light.cutoff)
    {
        float smoothing_factor = 1.0 - ((1.0 - theta) / (1.0 - light.cutoff));
        color = calcPointLight(light.point, normal, world_pos) * smoothing_factor;
    }

    return color;
}

vec4 reinhard(vec4 hdr_color)
{
    // reinhard tonemapping
    vec3 ldr_color = hdr_color.rgb / (hdr_color.rgb + 1.0);

    // gamma correction
    ldr_color = pow(ldr_color, vec3(1.0 / gamma));

    return vec4(ldr_color, 1.0);
}