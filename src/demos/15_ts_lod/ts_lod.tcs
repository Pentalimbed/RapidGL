/* This shader is executed once per control point in the output patch */
#version 460 core

/* Define the number of control points in the output patch */
layout (vertices = 1) out;

// uniform vec3 cam_pos;
uniform float tessellation_level;

in vec3 world_pos_TCS_in[];
in vec3 world_normal_TCS_in[];
in vec2 texcoord_TCS_in[];

struct OutputPatch
{
    vec3 world_pos_B030;
    vec3 world_pos_B021;
    vec3 world_pos_B012;
    vec3 world_pos_B003;
    vec3 world_pos_B102;
    vec3 world_pos_B201;
    vec3 world_pos_B300;
    vec3 world_pos_B210;
    vec3 world_pos_B120;
    vec3 world_pos_B111;
    vec3 world_normal[3];
    vec2 texcoord[3];
};

// attributes of the output CPs
out patch OutputPatch out_patch;

float get_tess_level(float distance0, float distance1)
{
    float avg_distance = (distance0 + distance1) / 2.0;

    if (avg_distance <= 5.0) 
    {
        return 10.0;
    }
    else if (avg_distance <= 10.0) 
    {
        return 4.0;
    }
    else 
    {
        return 1.0;
    }
}

vec3 project_to_plane(vec3 Point, vec3 PlanePoint, vec3 PlaneNormal)
{
    vec3 v = Point - PlanePoint;
    float Len = dot(v, PlaneNormal);
    vec3 d = Len * PlaneNormal;
    return (Point - d);
}

void calc_positions()
{
    // The original vertices stay the same
    out_patch.world_pos_B030 = world_pos_TCS_in[0];
    out_patch.world_pos_B003 = world_pos_TCS_in[1];
    out_patch.world_pos_B300 = world_pos_TCS_in[2];

    // Edges are names according to the opposing vertex
    vec3 edge_B300 = out_patch.world_pos_B003 - out_patch.world_pos_B030;
    vec3 edge_B030 = out_patch.world_pos_B300 - out_patch.world_pos_B003;
    vec3 edge_B003 = out_patch.world_pos_B030 - out_patch.world_pos_B300;

    // Generate two midpoints on each edge
    out_patch.world_pos_B021 = out_patch.world_pos_B030 + edge_B300 / 3.0;
    out_patch.world_pos_B012 = out_patch.world_pos_B030 + edge_B300 * 2.0 / 3.0;
    out_patch.world_pos_B102 = out_patch.world_pos_B003 + edge_B030 / 3.0;
    out_patch.world_pos_B201 = out_patch.world_pos_B003 + edge_B030 * 2.0 / 3.0;
    out_patch.world_pos_B210 = out_patch.world_pos_B300 + edge_B003 / 3.0;
    out_patch.world_pos_B120 = out_patch.world_pos_B300 + edge_B003 * 2.0 / 3.0;

    // Project each midpoint on the plane defined by the nearest vertex and its normal
    out_patch.world_pos_B021 = project_to_plane(out_patch.world_pos_B021, out_patch.world_pos_B030, out_patch.world_normal[0]);
    out_patch.world_pos_B012 = project_to_plane(out_patch.world_pos_B012, out_patch.world_pos_B003, out_patch.world_normal[1]);
    out_patch.world_pos_B102 = project_to_plane(out_patch.world_pos_B102, out_patch.world_pos_B003, out_patch.world_normal[1]);
    out_patch.world_pos_B201 = project_to_plane(out_patch.world_pos_B201, out_patch.world_pos_B300, out_patch.world_normal[2]);
    out_patch.world_pos_B210 = project_to_plane(out_patch.world_pos_B210, out_patch.world_pos_B300, out_patch.world_normal[2]);
    out_patch.world_pos_B120 = project_to_plane(out_patch.world_pos_B120, out_patch.world_pos_B030, out_patch.world_normal[0]);

    // Handle the center
    vec3 center = (out_patch.world_pos_B003 + out_patch.world_pos_B030 + out_patch.world_pos_B300) / 3.0;
    out_patch.world_pos_B111  = (out_patch.world_pos_B021 + out_patch.world_pos_B012 + out_patch.world_pos_B102 + 
                                 out_patch.world_pos_B201 + out_patch.world_pos_B210 + out_patch.world_pos_B120) / 6.0;
    out_patch.world_pos_B111 += (out_patch.world_pos_B111 - center) / 2.0;
}

void main()
{
	// Set the control points of the output patch
    for (int i = 0 ; i < 3 ; i++) 
    {
       out_patch.world_normal[i] = world_normal_TCS_in[i];
       out_patch.texcoord[i]     = texcoord_TCS_in[i];
    }

    calc_positions();

    // Calculate the tessellation levels
    gl_TessLevelOuter[0] = tessellation_level;
    gl_TessLevelOuter[1] = tessellation_level;
    gl_TessLevelOuter[2] = tessellation_level;
    gl_TessLevelInner[0] = tessellation_level;
}