#version 460 core
layout (triangles, equal_spacing, ccw) in;

uniform mat4 view_projection;

struct OutputPatch
{
    vec3 world_pos_B030;
    vec3 world_pos_B021;
    vec3 world_pos_B012;
    vec3 world_pos_B003;
    vec3 world_pos_B102;
    vec3 world_pos_B201;
    vec3 world_pos_B300;
    vec3 world_pos_B210;
    vec3 world_pos_B120;
    vec3 world_pos_B111;
    vec3 world_normal[3];
    vec2 texcoord[3];
};

in patch OutputPatch out_patch;

out vec3 world_pos_FS_in;
out vec3 world_normal_FS_in;
out vec2 texcoord_FS_in;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main()
{
	// Interpolate the attributes of the output vertex using the barycentric coordinates
    texcoord_FS_in     = interpolate2D(out_patch.texcoord[0],     out_patch.texcoord[1],     out_patch.texcoord[2]);
    world_normal_FS_in = interpolate3D(out_patch.world_normal[0], out_patch.world_normal[1], out_patch.world_normal[2]);

    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;

    float u_pow3 = pow(u, 3);
    float v_pow3 = pow(v, 3);
    float w_pow3 = pow(w, 3);
    float u_pow2 = pow(u, 2);
    float v_pow2 = pow(v, 2);
    float w_pow2 = pow(w, 2);

    world_pos_FS_in = out_patch.world_pos_B300 * w_pow3 +
                      out_patch.world_pos_B030 * u_pow3 +
                      out_patch.world_pos_B003 * v_pow3 +
                      out_patch.world_pos_B210 * 3.0 * w_pow2 * u +
                      out_patch.world_pos_B120 * 3.0 * w * u_pow2 +
                      out_patch.world_pos_B201 * 3.0 * w_pow2 * v +
                      out_patch.world_pos_B021 * 3.0 * u_pow2 * v +
                      out_patch.world_pos_B102 * 3.0 * w * v_pow2 +
                      out_patch.world_pos_B012 * 3.0 * u * v_pow2 +
                      out_patch.world_pos_B111 * 6.0 * w * u * v;

    gl_Position = view_projection * vec4(world_pos_FS_in, 1.0);
}